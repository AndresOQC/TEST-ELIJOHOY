import{ao as o,ap as h,V as a}from"./index-Cuq-20sr.js";const t={async obtenerPreguntas(){try{return(await o.get("/test/preguntas")).data}catch(s){throw s.response?.data||s}},async iniciarTest(){try{await new Promise(r=>setTimeout(r,100));const s=sessionStorage.getItem("access_token");if(console.log("üîç Iniciando test - Token en sessionStorage:",!!s),console.log("üîç Token completo:",s?s.substring(0,50)+"...":"null"),!s)throw new Error("No hay token de autenticaci√≥n disponible");const e=await o.post("/test/iniciar",{},{headers:{Authorization:`Bearer ${s}`,"Content-Type":"application/json"}});return console.log("üîç Respuesta del servidor:",e.data),e.data}catch(s){throw console.error("‚ùå Error en iniciarTest:",s),s.response?.data||s}},async guardarRespuesta(s){try{return console.log("üîç Guardando respuesta - Token en sessionStorage:",!!sessionStorage.getItem("access_token")),(await o.post("/test/responder",s)).data}catch(e){throw console.error("‚ùå Error en guardarRespuesta:",e),e.response?.data||e}},async finalizarTest(s){try{return(await o.post(`/test/finalizar/${s}`)).data}catch(e){throw e.response?.data||e}},async obtenerMisSesiones(){try{return(await o.get("/test/mis-sesiones")).data}catch(s){throw console.error("‚ùå Error en obtenerMisSesiones:",s),s.response?.data||s}},async asociarSesion(s){try{const e=sessionStorage.getItem("access_token")||localStorage.getItem("access_token"),r={"Content-Type":"application/json"};return e&&(r.Authorization=`Bearer ${e}`),(await o.post("/test/asociar-sesion",{id_sesion:s},{headers:r})).data}catch(e){throw e.response?.data||e}},async buscarSesionPorId(s){try{return(await o.post("/test/buscar-sesion",{id_sesion:s})).data}catch(e){throw e.response?.data||e}},async obtenerTipos(){try{return(await o.get("/test/tipos")).data}catch(s){throw s.response?.data||s}},async obtenerTipoPorCodigo(s){try{return(await o.get(`/test/tipos/${s}`)).data}catch(e){throw e.response?.data||e}},async obtenerEstadisticas(){try{return(await o.get("/test/estadisticas")).data}catch(s){throw s.response?.data||s}}},d=h("test",{state:()=>({sesionActual:null,preguntas:[],respuestas:{},progreso:0,resultados:null,misSesiones:[],tiempoInicio:null}),getters:{getSesion:s=>s.sesionActual,tieneSessionActiva:s=>!!s.sesionActual,getProgreso:s=>s.progreso,estaCompleto:s=>s.progreso===32,getRespuesta:s=>e=>s.respuestas[e],getResultados:s=>s.resultados},actions:{async cargarPreguntas(){try{const s=await t.obtenerPreguntas();return s.success&&(this.preguntas=s.preguntas),s}catch(s){throw console.error("Error al cargar preguntas:",s),s}},async iniciarTest(){try{if(a().isAuthenticated){const e=await t.iniciarTest();if(console.log("Respuesta al iniciar test:",e),e.success)return this.sesionActual=e.sesion,this.respuestas={},this.progreso=0,this.resultados=null,this.tiempoInicio=Date.now(),e}else return this.sesionActual={id_sesion:"local-"+Date.now(),estado:"iniciado",fecha_inicio:new Date().toISOString()},this.respuestas={},this.progreso=0,this.resultados=null,this.tiempoInicio=Date.now(),console.log("Test iniciado localmente (no autenticado)"),{success:!0,sesion:this.sesionActual};return{success:!1,message:"Error al iniciar test"}}catch(s){throw console.error("Error al iniciar test:",s),s}},async guardarRespuesta(s,e){try{if(!this.sesionActual)throw new Error("No hay sesi√≥n activa");const r=this.tiempoInicio?Math.floor((Date.now()-this.tiempoInicio)/1e3):null;if(this.respuestas[s]={valor:e,tiempo:r},this.progreso=Object.keys(this.respuestas).length,a().isAuthenticated){const i=await t.guardarRespuesta({id_sesion:this.sesionActual.id_sesion,id_pregunta:s,valor_respuesta:e,tiempo_respuesta:r});i.success||console.error("Error guardando respuesta en BD:",i.message)}else localStorage.setItem("testRespuestas",JSON.stringify(this.respuestas));return console.log(`Progreso actualizado: ${this.progreso}/32 preguntas respondidas.`),this.tiempoInicio=Date.now(),{success:!0}}catch(r){throw console.error("Error al guardar respuesta:",r),r}},async sincronizarRespuestas(s=null){try{if(!a().isAuthenticated)return console.log("Usuario no autenticado, no se puede sincronizar"),{success:!1,message:"Usuario no autenticado"};if(!this.sesionActual)return console.log("No hay sesi√≥n activa, no se puede sincronizar"),{success:!1,message:"No hay sesi√≥n activa"};const r=s||this.respuestas;if(!r||Object.keys(r).length===0)return console.log("No hay respuestas para sincronizar"),{success:!0,message:"No hay respuestas para sincronizar"};console.log("Sincronizando respuestas:",r);const n=Object.entries(r).map(async([c,u])=>{const p=u.tiempo||Math.floor((Date.now()-this.tiempoInicio)/1e3);return t.guardarRespuesta({id_sesion:this.sesionActual.id_sesion,id_pregunta:parseInt(c),valor_respuesta:u.valor||u,tiempo_respuesta:p})}),l=(await Promise.all(n)).filter(c=>!c.success);return l.length>0?(console.error("Errores al sincronizar respuestas:",l),{success:!1,message:"Error al sincronizar algunas respuestas"}):(this.respuestas={...r},this.progreso=Object.keys(this.respuestas).length,console.log("Respuestas sincronizadas exitosamente"),{success:!0,message:"Respuestas sincronizadas exitosamente"})}catch(e){return console.error("Error al sincronizar respuestas:",e),{success:!1,message:e.message||"Error al sincronizar respuestas"}}},restaurarSesion(){try{const s=JSON.parse(localStorage.getItem("testSesion"));s&&(this.sesionActual=s,console.log("Sesi√≥n restaurada desde localStorage:",this.sesionActual))}catch(s){console.error("Error al restaurar la sesi√≥n desde localStorage:",s)}},async finalizarTest(){try{if(!a().isAuthenticated)throw new Error("REQUIERE_AUTH");if(console.log("Sesi√≥n actual:",this.sesionActual),!this.sesionActual)throw new Error("No hay sesi√≥n activa");if(this.progreso<32)throw new Error("Test incompleto");const e=await t.finalizarTest(this.sesionActual.id_sesion);return console.log("Respuesta del backend:",e),e.success&&(this.resultados=e.resultados),e}catch(s){throw console.error("Error al finalizar test:",s),s}},async obtenerResultados(s){try{const e=await t.obtenerResultados(s);return e.success&&(this.resultados=e.perfil),e}catch(e){throw console.error("Error al obtener resultados:",e),e}},async cargarMisSesiones(){try{const s=await t.obtenerMisSesiones();return s.success&&(this.misSesiones=s.sesiones),s}catch(s){throw console.error("Error al cargar sesiones:",s),s}},async asociarSesionAnonima(){try{const s=localStorage.getItem("tokenAnonimo");if(console.log("Token an√≥nimo para asociar:",s),!s){console.warn("No hay token an√≥nimo para asociar sesi√≥n.");return}const e=await t.asociarSesion(s);return console.log("Respuesta al asociar sesi√≥n:",e),e.success&&(localStorage.removeItem("tokenAnonimo"),this.tokenAnonimo=null,console.log("Token an√≥nimo eliminado despu√©s de asociar sesi√≥n.")),e}catch(s){console.error("Error al asociar sesi√≥n:",s)}},async verificarSesionPostTest(){try{if(!this.tokenAnonimo){console.warn("No hay token an√≥nimo almacenado.");return}const s=await t.verificarSesion(this.tokenAnonimo);return console.log("Respuesta al verificar sesi√≥n post-test:",s),s.success&&s.requiereLogin&&console.log("Redirigiendo al usuario a iniciar sesi√≥n o registrarse."),s}catch(s){throw console.error("Error al verificar sesi√≥n post-test:",s),s}},redirigirALoginORegistro(){console.warn("Redirigiendo al usuario a iniciar sesi√≥n o registrarse."),this.router.push("/auth/login")},limpiarTest(){this.sesionActual=null,this.respuestas={},this.progreso=0,this.resultados=null,this.tiempoInicio=null},async reiniciarTest(){return this.limpiarTest(),await this.iniciarTest()}}});export{d as u};
