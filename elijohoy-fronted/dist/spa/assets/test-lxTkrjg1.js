import{ao as h,V as t}from"./index-B0DP0xMs.js";import{t as o}from"./test-BasUwloK.js";const d=h("test",{state:()=>({sesionActual:null,preguntas:[],respuestas:{},progreso:0,resultados:null,misSesiones:[],tiempoInicio:null}),getters:{getSesion:s=>s.sesionActual,tieneSessionActiva:s=>!!s.sesionActual,getProgreso:s=>s.progreso,estaCompleto:s=>s.progreso===32,getRespuesta:s=>e=>s.respuestas[e],getResultados:s=>s.resultados},actions:{async cargarPreguntas(){try{const s=await o.obtenerPreguntas();return s.success&&(this.preguntas=s.preguntas),s}catch(s){throw console.error("Error al cargar preguntas:",s),s}},async iniciarTest(){try{if(t().isAuthenticated){const e=await o.iniciarTest();if(console.log("Respuesta al iniciar test:",e),e.success)return this.sesionActual=e.sesion,this.respuestas={},this.progreso=0,this.resultados=null,this.tiempoInicio=Date.now(),e}else return this.sesionActual={id_sesion:"local-"+Date.now(),estado:"iniciado",fecha_inicio:new Date().toISOString()},this.respuestas={},this.progreso=0,this.resultados=null,this.tiempoInicio=Date.now(),console.log("Test iniciado localmente (no autenticado)"),{success:!0,sesion:this.sesionActual};return{success:!1,message:"Error al iniciar test"}}catch(s){throw console.error("Error al iniciar test:",s),s}},async guardarRespuesta(s,e){try{if(!this.sesionActual)throw new Error("No hay sesión activa");const r=this.tiempoInicio?Math.floor((Date.now()-this.tiempoInicio)/1e3):null;if(this.respuestas[s]={valor:e,tiempo:r},this.progreso=Object.keys(this.respuestas).length,t().isAuthenticated){const a=await o.guardarRespuesta({id_sesion:this.sesionActual.id_sesion,id_pregunta:s,valor_respuesta:e,tiempo_respuesta:r});a.success||console.error("Error guardando respuesta en BD:",a.message)}else localStorage.setItem("testRespuestas",JSON.stringify(this.respuestas));return console.log(`Progreso actualizado: ${this.progreso}/32 preguntas respondidas.`),this.tiempoInicio=Date.now(),{success:!0}}catch(r){throw console.error("Error al guardar respuesta:",r),r}},async sincronizarRespuestas(s=null){try{if(!t().isAuthenticated)return console.log("Usuario no autenticado, no se puede sincronizar"),{success:!1,message:"Usuario no autenticado"};if(!this.sesionActual)return console.log("No hay sesión activa, no se puede sincronizar"),{success:!1,message:"No hay sesión activa"};const r=s||this.respuestas;if(!r||Object.keys(r).length===0)return console.log("No hay respuestas para sincronizar"),{success:!0,message:"No hay respuestas para sincronizar"};console.log("Sincronizando respuestas:",r);const c=Object.entries(r).map(async([i,n])=>{const l=n.tiempo||Math.floor((Date.now()-this.tiempoInicio)/1e3);return o.guardarRespuesta({id_sesion:this.sesionActual.id_sesion,id_pregunta:parseInt(i),valor_respuesta:n.valor||n,tiempo_respuesta:l})}),u=(await Promise.all(c)).filter(i=>!i.success);return u.length>0?(console.error("Errores al sincronizar respuestas:",u),{success:!1,message:"Error al sincronizar algunas respuestas"}):(this.respuestas={...r},this.progreso=Object.keys(this.respuestas).length,console.log("Respuestas sincronizadas exitosamente"),{success:!0,message:"Respuestas sincronizadas exitosamente"})}catch(e){return console.error("Error al sincronizar respuestas:",e),{success:!1,message:e.message||"Error al sincronizar respuestas"}}},restaurarSesion(){try{const s=JSON.parse(localStorage.getItem("testSesion"));s&&(this.sesionActual=s,console.log("Sesión restaurada desde localStorage:",this.sesionActual))}catch(s){console.error("Error al restaurar la sesión desde localStorage:",s)}},async finalizarTest(){try{if(!t().isAuthenticated)throw new Error("REQUIERE_AUTH");if(console.log("Sesión actual:",this.sesionActual),!this.sesionActual)throw new Error("No hay sesión activa");if(this.progreso<32)throw new Error("Test incompleto");const e=await o.finalizarTest(this.sesionActual.id_sesion);return console.log("Respuesta del backend:",e),e.success&&(this.resultados=e.resultados),e}catch(s){throw console.error("Error al finalizar test:",s),s}},async obtenerResultados(s){try{const e=await o.obtenerResultados(s);return e.success&&(this.resultados=e.perfil),e}catch(e){throw console.error("Error al obtener resultados:",e),e}},async cargarMisSesiones(){try{const s=await o.obtenerMisSesiones();return s.success&&(this.misSesiones=s.sesiones),s}catch(s){throw console.error("Error al cargar sesiones:",s),s}},async asociarSesionAnonima(){try{const s=localStorage.getItem("tokenAnonimo");if(console.log("Token anónimo para asociar:",s),!s){console.warn("No hay token anónimo para asociar sesión.");return}const e=await o.asociarSesion(s);return console.log("Respuesta al asociar sesión:",e),e.success&&(localStorage.removeItem("tokenAnonimo"),this.tokenAnonimo=null,console.log("Token anónimo eliminado después de asociar sesión.")),e}catch(s){console.error("Error al asociar sesión:",s)}},async verificarSesionPostTest(){try{if(!this.tokenAnonimo){console.warn("No hay token anónimo almacenado.");return}const s=await o.verificarSesion(this.tokenAnonimo);return console.log("Respuesta al verificar sesión post-test:",s),s.success&&s.requiereLogin&&console.log("Redirigiendo al usuario a iniciar sesión o registrarse."),s}catch(s){throw console.error("Error al verificar sesión post-test:",s),s}},redirigirALoginORegistro(){console.warn("Redirigiendo al usuario a iniciar sesión o registrarse."),this.router.push("/auth/login")},limpiarTest(){this.sesionActual=null,this.respuestas={},this.progreso=0,this.resultados=null,this.tiempoInicio=null},async reiniciarTest(){return this.limpiarTest(),await this.iniciarTest()}}});export{d as u};
